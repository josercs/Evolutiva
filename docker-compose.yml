version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: "UTC"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks: [evolutiva]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [evolutiva]

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    env_file: [.env]
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      USE_SQLITE: "false"
      AUTO_DDL_ON_START: "0"
      WORKERS: ${WORKERS:-3}
      THREADS: ${THREADS:-4}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-120}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl","-fsS","http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    security_opt:
      - no-new-privileges:true
    networks: [evolutiva]

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["bash","-lc","python -m rq worker -u ${REDIS_URL:-redis://redis:6379/0} evolutiva"]
    env_file: [.env]
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      USE_SQLITE: "false"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks: [evolutiva]

  frontend-build:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Executa build e copia para volume e encerra
    environment:
      VITE_API_URL: /api
    volumes:
      - webroot:/webroot
    command: ["/bin/sh","-c","npm run build >/dev/null 2>&1 || true; cp -r /out/* /webroot/ 2>/dev/null || true"]
    networks: [evolutiva]

  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    depends_on:
      - frontend-build
      - api
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - webroot:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      # ative 443 se tiver certificados:
      # - "443:443"
      # - ./infra/nginx/certs:/etc/nginx/certs:ro
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost/" ]
      interval: 30s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks: [evolutiva]

volumes:
  pgdata:
  redisdata:
  webroot:

networks:
  evolutiva:
    driver: bridge
