# =============================================================
# CI PIPELINE – Backend, Nginx, Frontend, E2E
# -------------------------------------------------------------
# Etapas:
# 1. backend-test  : Lint (ruff/black) + pytest (SQLite) + cobertura
# 2. nginx-validate : Valida sintaxe do nginx.conf em container oficial
# 3. frontend-build : ESLint + build Vite + artefato dist
# 4. e2e-tests      : Sobe stack docker-compose + roda Playwright
# -------------------------------------------------------------
# Notas:
# - Cancelamento de execuções antigas via 'concurrency'
# - Use secrets (JWT_SECRET_KEY etc.) se precisar cobrir fluxos sensíveis
# - Playwright depende de testes/rotas estáveis e seed de dados
# =============================================================
name: CI

on:
  push:
    branches: [ main, develop ]  # Ajuste conforme estratégia git-flow
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-test:
    name: Backend (lint + tests)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff black

      - name: Lint (ruff & black --check)
        run: |
          ruff check .
          black --check .

      - name: Run tests (SQLite)
        env:
          USE_SQLITE: '1'
          FLASK_ENV: testing
          SECRET_KEY: test
          JWT_SECRET_KEY: testjwt
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml

      - name: Upload coverage xml
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml

  nginx-validate:
    name: Nginx (syntax test)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate nginx.conf
        run: |
          docker run --rm -v "$PWD/infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro" nginx:stable-alpine nginx -t

  frontend-build:
    name: Frontend (lint + build)
    runs-on: ubuntu-latest
    needs: [ backend-test, nginx-validate ]
    defaults:
      run:
        working-directory: frontend/sistema-estudos
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/sistema-estudos/package-lock.json

      - name: Install
        run: npm ci

      - name: Lint (ESLint)
        run: |
          if [ -f package.json ] && grep -q eslint package.json; then npx eslint . --max-warnings=0; else echo 'ESLint não configurado'; fi

      - name: Build
        env:
          VITE_API_URL: /api
        run: npm run build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/sistema-estudos/dist

  e2e-tests:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    needs: [ frontend-build ]
    services:
      postgres:
        image: postgres:15-alpine
        env:
            POSTGRES_PASSWORD: test
            POSTGRES_USER: postgres
            POSTGRES_DB: sistema_estudos
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7-alpine
        ports: [ '6379:6379' ]
        options: >-
          --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python (API runtime)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend deps (runtime subset)
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start API (background)
        env:
          DB_USERNAME: postgres
          DB_PASSWORD: test
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: sistema_estudos
          JWT_SECRET_KEY: testjwt
          SECRET_KEY: test
          USE_SQLITE: '0'
          FRONTEND_ORIGINS: http://localhost:5173,http://127.0.0.1:5173,http://localhost
        run: |
          cd backend/src
          nohup python main.py > ../../api.log 2>&1 &

      - name: Wait for API health
        run: |
          for i in {1..40}; do
            curl -fsS http://127.0.0.1:5000/api/health && break
            sleep 2
          done
          curl -fsS http://127.0.0.1:5000/api/health || (echo 'API não subiu' && exit 1)

      - name: Setup Node / Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend deps
        run: |
          cd frontend/sistema-estudos
          npm ci

      - name: Build frontend (local dev server not needed)
        run: |
          cd frontend/sistema-estudos
          npm run build

      - name: Serve dist (preview) em background
        run: |
          cd frontend/sistema-estudos
          npx serve -s dist -l 5173 &
          sleep 2

      - name: Install Playwright browsers
        run: |
          cd frontend/sistema-estudos
          npx playwright install --with-deps

      - name: (Opcional) Seed simples via API
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -d '{"email":"e2e@example.com","password":"senha123"}' \
            http://127.0.0.1:5000/api/auth/register || true

      - name: Run Playwright tests
        env:
          E2E_BASE_URL: http://localhost:5173
        run: |
          cd frontend/sistema-estudos
          if [ -f package.json ] && grep -q playwright package.json; then npx playwright test --reporter=line; else echo 'Playwright não configurado'; fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/sistema-estudos/playwright-report

      - name: Upload API log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-log
          path: api.log

# =============================================================
# OBSERVAÇÕES / AJUSTES FUTUROS
# - Adicionar badge de coverage consumindo backend-coverage (Codecov ou Coveralls)
# - Incluir variação de Python (matrix) e Node se necessário
# - Adicionar job de segurança (pip-audit / trivy) e SAST
# - E2E: considerar docker-compose para reproduzir ambiente o mais próximo possível
# =============================================================
